{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Geoapify Route Optimization SDK","text":"<p>The Geoapify Route Optimization SDK is a lightweight, dependency-free TypeScript library that simplifies building, executing requests, and modifying results for the Geoapify Route Planner API.</p> <p>It helps you easily implement advanced route optimization and delivery planning in both frontend (browser) and backend (Node.js) environments.</p>"},{"location":"#sdk-overview","title":"SDK Overview","text":"Class Description Docs RoutePlanner Entry point for the SDK. Handles request construction and execution. Read more RoutePlannerResult Encapsulates the API response and provides access to raw and structured route data. Read more RoutePlannerResultEditor Utility for modifying planned routes: reassign jobs, remove stops, or re-sequence visits. Read more RoutePlannerTimeline Extracts agent schedules, travel times, idle periods \u2014 useful for visualization. Read more"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install the SDK using npm:</p> <pre><code>npm install @geoapify/route-planner-sdk\n</code></pre>"},{"location":"#in-typescript-nodejs","title":"In TypeScript / Node.js:","text":"<pre><code>import RoutePlanner, { Agent, Job } from \"@geoapify/route-planner-sdk\";\n\nconst planner = new RoutePlanner({\n  apiKey: \"YOUR_API_KEY\",\n});\n\nconst solution = await planner\n  .setMode(\"drive\")\n  .addAgent(new Agent().setId(\"agent-1\").setStartLocation(13.38, 52.52))\n  .addJob(new Job().setId(\"job-1\").setLocation(13.39, 52.51))\n  .plan();\n</code></pre> <p>Or initialize using raw data:</p> <pre><code>const routePlannerData: RoutePlannerInputData = {\n    \"mode\": \"drive\",\n    \"agents\": [\n      {\n        \"start_location\": [\n          13.408979393152407,\n          52.5217881\n        ],\n        \"end_location\": [\n          13.408979393152407,\n          52.5217881\n        ],\n        \"time_windows\": [\n          [\n            3600,\n            10800\n          ]\n        ],\n        \"capabilities\": [\n          \"Cooling system tester\",\n          \"Welding machine\"\n        ]\n      },\n      {\n        \"start_location\": [\n          13.412346074367065,\n          52.5247835\n        ],\n        \"end_location\": [\n          13.412346074367065,\n          52.5247835\n        ],\n        \"time_windows\": [\n          [\n            0,\n            7200\n          ]\n        ],\n        \"capabilities\": [\n          \"Welding machine\",\n          \"Motor locking tool\",\n          \"Electrician\"\n        ]\n      },\n      ...\n      }\n    ],\n    \"jobs\": [\n      {\n        \"location\": [\n          13.399061126634654,\n          52.5245554\n        ],\n        \"duration\": 3600,\n        \"requirements\": [\n          \"Electrician\"\n        ]\n      },\n      {\n        \"location\": [\n          13.409279714436334,\n          52.52310275\n        ],\n        \"duration\": 3600\n      },\n      {\n        \"location\": [\n          13.399706613593082,\n          52.52515335\n        ],\n        \"duration\": 1800\n      },\n      {\n        \"location\": [\n          13.402211587720586,\n          52.523039600000004\n        ],\n        \"duration\": 3600,\n        \"requirements\": [\n          \"Welding machine\"\n        ]\n      },\n      ...\n    ]\n};\n\nconst planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" }, routePlannerData);\nconst solution = await planner.plan();\n</code></pre>"},{"location":"#in-html-via-cdn","title":"In HTML (via CDN):","text":"<pre><code>&lt;script src=\"https://unpkg.com/@geoapify/route-planner-sdk/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const planner = new RoutePlannerSDK.RoutePlanner({\n    apiKey: \"YOUR_API_KEY\"\n  });\n&lt;/script&gt;\n</code></pre> <p>Get your API key by signing up on geoapify.com</p>"},{"location":"#try-it-live","title":"Try It Live","text":"<p>Explore the API in an interactive environment using the Geoapify Route Planner Playground \u2192</p>"},{"location":"entities/","title":"Entities &amp; Concepts","text":"<p>The Geoapify Route Optimization SDK is a high-level interface to the Geoapify Route Planner API. It allows you to solve logistics problems like multi-agent delivery, pickup/drop-off routing, and scheduling under constraints (e.g., working hours, priorities, traffic).</p> <p>This page explains the core concepts and entities used by the SDK and API \u2014 not just as field definitions, but how they interact during route planning.</p>"},{"location":"entities/#how-the-route-planning-works","title":"How the Route Planning Works","text":"<p>At a high level, route optimization is about finding the best way for a set of agents (e.g., drivers) to complete a set of jobs or shipments given constraints like working hours, traffic, and capacity.</p> <p>Here's a simplified flow:</p> <pre><code>+--------------------+      +----------------+       +---------------------+\n|  Agent definitions | ---&gt; | Optimization   | ---&gt;  | Optimized routes    |\n|  Job/Shipment list |      | Engine (API)   |       | per agent, with     |\n|  Constraints       |      |                |       | timings &amp; order     |\n+--------------------+      +----------------+       +---------------------+\n</code></pre> <p>You define:</p> <ul> <li>Who is available? \u2192 agents</li> <li>What needs to be done? \u2192 jobs or shipments</li> <li>When and how? \u2192 time windows, traffic, routing mode</li> </ul> <p>The system returns optimized plans for each agent.</p>"},{"location":"entities/#core-concepts","title":"Core Concepts","text":""},{"location":"entities/#agents","title":"Agents","text":"<p>Agents represent mobile resources: vehicles, drivers, couriers, field workers. Each agent can:</p> <ul> <li>Have a start and optional end location (e.g., warehouse)</li> <li>Be available only at certain times (e.g., 8am\u20135pm)</li> <li>Take breaks during the day</li> <li>Carry specific tools or have certain skills (via <code>capabilities</code>)</li> <li>Have limits on what or how much they can carry (e.g., <code>pickup_capacity</code>)</li> </ul> <p>Each agent will be assigned a custom route that fits within these constraints.</p>"},{"location":"entities/#jobs","title":"Jobs","text":"<p>Jobs are simple one-stop tasks, such as deliveries or field visits. A job can:</p> <ul> <li>Be located at a single point</li> <li>Have service time (how long it takes to complete)</li> <li>Be time-constrained (e.g., only from 2pm to 4pm)</li> <li>Require certain skills (e.g., \"fragile handling\")</li> <li>Have priority, so lower-priority jobs may be skipped if time is tight</li> </ul> <p>Jobs are assigned to agents who can serve them, based on location, time, and capabilities.</p>"},{"location":"entities/#shipments","title":"Shipments","text":"<p>Shipments represent pickup and delivery pairs \u2014 a pickup happens at one location, and a delivery at another.</p> <ul> <li>Each shipment has a unique ID</li> <li>Pickup and delivery can have separate time windows</li> <li>Both steps belong to the same shipment and must be assigned to one agent</li> <li>Can specify amount of goods, and requirements</li> </ul> <p>Useful for logistics with backhauls or parcel delivery.</p>"},{"location":"entities/#locations","title":"Locations","text":"<p>To avoid repeating coordinates, you can define shared locations in a list and reference them by index in agents, jobs, and shipments.</p> <p>Improves efficiency and keeps payloads smaller.</p>"},{"location":"entities/#time-windows","title":"Time Windows","text":"<p>Time windows are used to define when agents, jobs, or shipments are allowed to operate. They are expressed as intervals in relative seconds from the start of the planning task.</p> <pre><code>[[0, 3600]] // Available the first hour only\n[[0, 14400], [18000, 32400]] // 8-hour workday with 1-hour lunch break\n</code></pre> <p>This format is shared across:</p> <ul> <li>Agents: to define working hours</li> <li>Jobs: to indicate when a service must occur</li> <li>Shipments: to constrain pickup and delivery timeframes</li> <li>Breaks: to specify acceptable timeframes for taking a rest from the start of planning. You can apply them to agents, jobs, or breaks.</li> </ul>"},{"location":"entities/#constraints","title":"Constraints","text":"<p>Constraints let you customize route planning:</p> <ul> <li>Routing mode: e.g., <code>drive</code>, <code>bike</code>, <code>truck</code></li> <li>Traffic model: <code>free_flow</code> (default), or <code>approximated</code></li> <li>Route type: shortest, balanced, fewer turns</li> <li>Max speed: optional per-agent speed cap</li> <li>Avoids: road types (e.g., no tolls)</li> </ul>"},{"location":"entities/#putting-it-together","title":"Putting It Together","text":"<p>When you call the API or use the SDK, you combine all the above into a planning request.</p> <pre><code>const planner = new RoutePlanner({ apiKey });\n\nconst result = await planner\n  .setMode(\"drive\")\n  .addAgent(...)\n  .addJob(...)\n  .plan();\n</code></pre> <p>The SDK wraps the API call, handles validation, and returns a <code>RoutePlannerResult</code> \u2014 which you can use as-is or modify using tools like <code>RoutePlannerResultEditor</code> and visualize with <code>RoutePlannerTimeline</code>.</p> <p>For details on how to format each object (Agent, Job, Shipment, etc.), see the API Reference.</p> <p>Try it in the Playground.</p>"},{"location":"installation-and-import/","title":"Installation","text":"<p>Install the SDK from NPM:</p> <pre><code>npm install @geoapify/route-planner-sdk\n</code></pre>"},{"location":"installation-and-import/#import-and-initialize-the-sdk","title":"Import and Initialize the SDK","text":"<p>You can use the SDK in both frontend and backend environments.</p>"},{"location":"installation-and-import/#in-typescript-nodejs-es-modules","title":"In TypeScript / Node.js / ES modules","text":"<pre><code>import RoutePlanner, { Agent, Job } from \"@geoapify/route-planner-sdk\";\n\nconst planner = new RoutePlanner({\n  apiKey: \"YOUR_API_KEY\", // Get it from https://my.geoapify.com/\n});\n</code></pre>"},{"location":"installation-and-import/#in-a-browser-via-cdn","title":"In a Browser (via CDN)","text":"<pre><code>&lt;script src=\"https://unpkg.com/@geoapify/route-planner-sdk/dist/index.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  const planner = new RoutePlannerSDK.RoutePlanner({\n    apiKey: \"YOUR_API_KEY\"\n  });\n&lt;/script&gt;\n</code></pre> <p>Note: This method loads the SDK via unpkg CDN and makes it available globally as <code>RoutePlannerSDK</code>.</p>"},{"location":"installation-and-import/#getting-the-api-key","title":"Getting the API Key","text":"<p>You need a valid Geoapify API key to use the SDK. You can get a free key by signing up at https://www.geoapify.com/.</p> <p>This key is required to authenticate requests to the Geoapify Route Planner API.</p>"},{"location":"results/","title":"Route Optimization Result: Conceptual Overview","text":"<p>Once you submit a route planning request, the Geoapify Route Planner API returns a structured plan \u2014 not just a route, but a full execution schedule for each agent (driver, worker, or vehicle).</p> <p>This result helps answer key questions:</p> <ul> <li>What will each agent do?</li> <li>In what order will they visit stops?</li> <li>When will they arrive and how long will they stay?</li> <li>Are there any unassigned jobs or unresolved constraints?</li> </ul> <p>The SDK processes this output and provides tools to explore, visualize, and modify the result.</p>"},{"location":"results/#how-the-result-is-structured","title":"How the Result Is Structured","text":"<p>The result is organized by agent. For each agent, the system provides:</p> <ul> <li>A route path (map line connecting the stops)</li> <li>A sequence of actions (e.g., pickup, delivery)</li> <li>A timeline of when each action happens</li> <li>A list of waypoints where actions occur</li> <li>Travel legs between waypoints, with distances and durations</li> </ul> <p>It also includes a summary of issues, such as unassigned jobs or idle agents.</p> <p>Think of it as a personalized itinerary for every agent, shaped by all the constraints and optimization logic you provided.</p>"},{"location":"results/#agentsolution-agent-execution-plan","title":"AgentSolution: Agent Execution Plan","text":"<p>Each agent\u2019s result is encapsulated as an <code>AgentSolution</code>. This object describes all activities and movements assigned to the agent, including:</p> <ul> <li>Start time: When their shift or route begins</li> <li>Route geometry: A visual path between all stops</li> <li>Action list: Step-by-step tasks like pickups and deliveries</li> <li>Waypoint list: All physical locations visited</li> <li>Travel segments: Durations and distances between stops</li> </ul> <p>These components allow you to:</p> <ul> <li>Plot the route on a map</li> <li>Build a timeline view of the day</li> <li>Animate movement between tasks</li> <li>Track delays or idle time</li> </ul>"},{"location":"results/#waypoints-and-actions","title":"Waypoints and Actions","text":"<p>Each stop along an agent's route is called a waypoint. A waypoint includes:</p> <ul> <li>Its location</li> <li>The time the agent arrives</li> <li>All actions performed at that location (e.g., deliver a package, take a break)</li> </ul> <p>Actions are the smallest unit of work. They can represent:</p> <ul> <li>Start of the route</li> <li>Pickup of a shipment</li> <li>Job execution</li> <li>Delivery of a shipment</li> <li>End of the route</li> </ul> <p>By combining actions with locations and times, you can reconstruct an agent\u2019s full day.</p>"},{"location":"results/#travel-segments-legs","title":"Travel Segments (Legs)","text":"<p>Between every pair of waypoints is a travel leg. Legs describe:</p> <ul> <li>The distance to the next stop</li> <li>The time it will take</li> <li>Step-by-step navigation data (optional)</li> </ul> <p>This helps estimate total drive time and fuel usage, and can be used for route visualization.</p>"},{"location":"results/#what-happens-when-planning-fails","title":"What Happens When Planning Fails?","text":"<p>In some cases, the system cannot assign all tasks. These situations are summarized in the Unassigned section of the result, which highlights what could not be planned:</p> <ul> <li>Unassigned agents \u2014 agents who were not given any jobs or shipments</li> <li>Unassigned jobs \u2014 jobs that couldn't be included in any agent\u2019s route</li> <li>Unassigned shipments \u2014 shipments that had no matching or available agent</li> </ul> <p>Unassignment can occur due to:</p> <ul> <li>Conflicting or tight time windows</li> <li>Capacity limits being exceeded</li> <li>Lack of required capabilities or skills</li> <li>Inadequate available working time</li> </ul> <p>The SDK exposes this information so you can adjust the input, add agents, relax constraints, or manually reassign tasks using <code>RoutePlannerResultEditor</code>.</p>"},{"location":"results/#why-this-matters","title":"Why This Matters","text":"<p>The result isn\u2019t just a route \u2014 it\u2019s a complete logistics schedule:</p> <ul> <li>Optimized for time and distance</li> <li>Respecting all constraints</li> <li>Ready for visualization, reporting, or editing</li> </ul> <p>This enables:</p> <ul> <li>Driver-facing dashboards or printed plans</li> <li>Timeline and map views for dispatchers</li> <li>Automated plan editing with SDK tools</li> </ul> <p>To work with this output, use the SDK\u2019s:</p> <ul> <li><code>RoutePlannerResult</code> \u2014 to access the plan</li> <li><code>RoutePlannerResultEditor</code> \u2014 to modify or rebalance the plan</li> <li><code>RoutePlannerTimeline</code> \u2014 to generate structured timelines for UI components</li> </ul>"},{"location":"api/","title":"API Overview","text":"<p>The Geoapify Route Optimization SDK provides a structured, TypeScript-first interface for interacting with the Geoapify Route Planner API. It simplifies the process of building and sending optimization requests, interpreting results, modifying assignments, and visualizing agent plans.</p>"},{"location":"api/#modules","title":"Modules","text":"<p>The SDK is organized into three key parts:</p>"},{"location":"api/#1-core-classes","title":"1. Core Classes","text":"Class Purpose <code>RoutePlanner</code> Build and execute route planning requests <code>RoutePlannerResult</code> Parse and analyze route results <code>RoutePlannerResultEditor</code> Reassign or modify jobs/shipments <code>RoutePlannerTimeline</code> Render timelines for UI/visualization"},{"location":"api/#2-entities-input-objects","title":"2. Entities (Input Objects)","text":"<p>Use these to define the input for your route plan:</p> Entity Description <code>Agent</code> Represents a resource (driver, worker, vehicle) <code>Job</code> Task or delivery to perform at a location <code>Shipment</code> Pickup + delivery pair <code>Location</code> Reusable named coordinate reference <code>Avoid</code> Travel restrictions (e.g., avoid toll roads)"},{"location":"api/#3-entities-result-objects","title":"3. Entities (Result Objects)","text":"<p>These classes help interpret and structure the result of the route planner:</p> Entity Description <code>AgentSolution</code> Full plan for an agent: route, actions, timeline <code>Waypoint</code> Stops where agent performs tasks <code>RouteAction</code> Actions like pickup, delivery, break <code>RouteLeg</code> Segment between waypoints <code>JobSolution</code> Links a job to an agent and timeline <code>ShipmentSolution</code> Links a shipment to agent and execution steps"},{"location":"api/#typical-flow","title":"Typical Flow","text":"<pre><code>// 1. Build input\nconst planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" });\nplanner\n  .setMode(\"drive\")\n  .addAgent(new Agent().setStartLocation(...))\n  .addJob(new Job().setLocation(...));\n\n// 2. Execute\nconst result = await planner.plan();\n\n// 3. Explore result\nconst agents = result.getAgentSolutions();\nconst waypoints = result.getAgentWaypoints(\"agent-1\");\n\n// 4. Modify if needed\nconst editor = new RoutePlannerResultEditor(result);\nawait editor.assignJobs(\"agent-2\", [\"job-3\"]);\n</code></pre>"},{"location":"api/#ui-integration","title":"UI Integration","text":"<ul> <li>Use <code>RoutePlannerTimeline</code> to create interactive, embeddable views of agent schedules.</li> <li>Build dashboards, map overlays, or edit tools on top of these components.</li> </ul>"},{"location":"api/#learn-more","title":"Learn More","text":"<ul> <li>Installation</li> <li>Core Concepts</li> <li>Understanding Results</li> <li>SDK Playground</li> </ul>"},{"location":"api/agent-solution/","title":"<code>AgentSolution</code>","text":"<p>The <code>AgentSolution</code> class represents the full route execution plan for a single agent after optimization. It includes all scheduled stops, travel segments, performed actions, and associated timing data.</p> <p>Each instance of <code>AgentSolution</code> is part of the overall result returned by the Geoapify Route Planner and corresponds to one agent (driver, vehicle, or worker).</p>"},{"location":"api/agent-solution/#purpose","title":"Purpose","text":"<p>Use <code>AgentSolution</code> to:</p> <ul> <li>Inspect an agent\u2019s full route: sequence, distance, and duration</li> <li>Analyze detailed execution steps (actions, waypoints, travel legs)</li> <li>Generate visualizations (timelines, route paths, task lists)</li> <li>Support manual or programmatic editing of agent plans</li> </ul>"},{"location":"api/agent-solution/#constructor","title":"Constructor","text":"<pre><code>new AgentSolution(raw: AgentSolutionData)\n</code></pre> <p>Initializes a new solution based on raw planner output. Throws an error if no data is provided.</p>"},{"location":"api/agent-solution/#methods","title":"Methods","text":""},{"location":"api/agent-solution/#agent-info","title":"Agent Info","text":"Method Description <code>getAgentIndex()</code> Returns the agent\u2019s index in the original <code>agents[]</code> input <code>getAgentId()</code> Returns the agent\u2019s <code>id</code> if defined in input <code>getMode()</code> Returns the mode of transport used (e.g., <code>\"drive\"</code>)"},{"location":"api/agent-solution/#timing","title":"Timing","text":"Method Description <code>getTime()</code> Total travel time (seconds) <code>getStartTime()</code> Time the agent begins execution <code>getEndTime()</code> Time the agent finishes all tasks"},{"location":"api/agent-solution/#distance","title":"Distance","text":"Method Description <code>getDistance()</code> Total distance (in meters) of the agent's route"},{"location":"api/agent-solution/#route-breakdown","title":"Route Breakdown","text":"Method Description <code>getLegs()</code> Returns an array of <code>RouteLeg</code> objects representing travel segments <code>getActions()</code> Returns an array of <code>RouteAction</code> objects representing execution steps like <code>pickup</code>, <code>delivery</code>, etc. <code>getWaypoints()</code> Returns an array of <code>Waypoint</code> objects corresponding to stops along the route <p>These objects provide the full breakdown of an agent\u2019s route \u2014 allowing fine-grained control for visualization, simulation, and editing.</p>"},{"location":"api/agent-solution/#example","title":"Example","text":"<pre><code>const agentPlan = new AgentSolution(data);\nconst waypoints = agentPlan.getWaypoints();\nconst totalTime = agentPlan.getTime();\n</code></pre> <p>This reads and analyzes the result for a specific agent \u2014 including location-by-location breakdown.</p>"},{"location":"api/agent-solution/#related","title":"Related","text":"<ul> <li><code>RoutePlannerResult</code> \u2013 entry point for accessing all <code>AgentSolution</code> objects</li> <li><code>RouteLeg</code> \u2013 represents travel segments</li> <li><code>RouteAction</code> \u2013 represents individual execution events</li> <li><code>Waypoint</code> \u2013 represents stop locations and timings</li> </ul>"},{"location":"api/agent/","title":"<code>Agent</code>","text":"<p>The <code>Agent</code> class represents a resource (driver, vehicle, or field worker) in the Geoapify Route Optimization SDK. It is used to define who can perform jobs and shipments during route planning.</p> <p>Each agent can have constraints such as start and end location, working time windows, vehicle capacity, and custom capabilities (e.g., refrigerated vehicle, medical skills, etc.).</p>"},{"location":"api/agent/#purpose","title":"Purpose","text":"<p>The <code>Agent</code> class wraps the raw <code>AgentData</code> object and provides a fluent, chainable API to configure all aspects of the agent.</p> <p>You use this class to: - Define where an agent starts and ends their route - Add working time windows and rest breaks - Assign vehicle or skill capabilities - Set container capacities for pickups and deliveries</p>"},{"location":"api/agent/#constructor","title":"Constructor","text":"<pre><code>new Agent(raw?: AgentData)\n</code></pre> <p>Creates a new agent instance. If <code>raw</code> is not provided, initializes an empty agent with default empty arrays for capabilities, time windows, and breaks.</p>"},{"location":"api/agent/#methods","title":"Methods","text":""},{"location":"api/agent/#basic-configuration","title":"Basic Configuration","text":"Method Description <code>setId(value: string)</code> Assigns a custom agent ID <code>setDescription(value: string)</code> Adds a human-readable description <code>getRaw()</code> Returns the internal <code>AgentData</code> object <code>setRaw(value: AgentData)</code> Replaces the current agent data"},{"location":"api/agent/#location-setup","title":"Location Setup","text":"Method Description <code>setStartLocation(lon, lat)</code> Defines the starting point of the route <code>setStartLocationIndex(index)</code> Uses a reusable location from the <code>locations</code> array <code>setEndLocation(lon, lat)</code> Defines the end point of the route (optional) <code>setEndLocationIndex(index)</code> References a shared end location by index"},{"location":"api/agent/#capacity","title":"Capacity","text":"Method Description <code>setPickupCapacity(value)</code> Max amount of goods the agent can pick up (for bulky shipments) <code>setDeliveryCapacity(value)</code> Max amount of goods the agent can deliver (for bulky shipments)"},{"location":"api/agent/#time-breaks","title":"Time &amp; Breaks","text":"Method Description <code>addTimeWindow(start, end)</code> Adds an available working interval in relative seconds <code>addBreak(break: Break)</code> Adds a break (with duration and allowed windows); see <code>Break</code> <p>Time windows represent when the agent is available to work (e.g. <code>[[0, 14400], [18000, 32400]]</code> for 8 hours with a 1-hour lunch).</p>"},{"location":"api/agent/#capabilities","title":"Capabilities","text":"Method Description <code>addCapability(value)</code> Adds a tag like <code>'refrigerated'</code>, <code>'electric'</code>, etc. <p>Capabilities are matched against <code>Job</code> or <code>Shipment</code> requirements.</p>"},{"location":"api/agent/#example","title":"Example","text":"<pre><code>import { Agent } from \"@geoapify/route-planner-sdk\";\n\nconst agent = new Agent()\n  .setId(\"van-1\")\n  .setStartLocation(13.38, 52.52)\n  .addCapability(\"refrigerated\")\n  .addTimeWindow(0, 28800) // available for 8 hours\n  .setPickupCapacity(1000)\n  .setDescription(\"Morning delivery van\");\n</code></pre> <p>This creates an agent ready for planning with location, time, and capacity settings.</p>"},{"location":"api/agent/#related","title":"Related","text":"<ul> <li><code>Break</code> \u2013 to define rest periods</li> <li><code>Job</code> \u2013 tasks that agents can be assigned</li> <li><code>Shipment</code> \u2013 pickup and delivery pairs</li> <li><code>Location</code> \u2013 shared reusable location entries</li> </ul>"},{"location":"api/avoid/","title":"<code>Avoid</code>","text":"<p>The <code>Avoid</code> class allows you to define route restrictions for the optimization engine. It is used to specify what the agent should avoid \u2014 such as toll roads, highways, or specific coordinates.</p> <p>This can be helpful when:</p> <ul> <li>A vehicle cannot use toll roads</li> <li>Certain areas are inaccessible or off-limits</li> <li>You want to exclude parts of the map due to traffic, regulation, or policy</li> </ul>"},{"location":"api/avoid/#purpose","title":"Purpose","text":"<p>Used within a route planning request to indicate areas or road types that should be avoided during optimization. Each avoid rule has a <code>type</code> and one or more <code>values</code> depending on the type.</p> <p>Common types include:</p> <p>-<code>\"tolls\"</code> \u2013 avoid toll roads - <code>\"highways\"</code> \u2013 avoid highways - <code>\"locations\"</code> \u2013 avoid specific locations by coordinates</p>"},{"location":"api/avoid/#constructor","title":"Constructor","text":"<pre><code>new Avoid(raw?: AvoidData)\n</code></pre> <p>Creates a new <code>Avoid</code> object. If no data is passed, it initializes an empty avoid configuration with no values.</p>"},{"location":"api/avoid/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>AvoidData</code> object <code>setRaw(data)</code> Replaces the avoid rule with a new <code>AvoidData</code> object <code>setType(type)</code> Sets the avoid type (<code>\"tolls\"</code>, <code>\"highways\"</code>, <code>\"locations\"</code>, etc.) <code>addValue(lon, lat)</code> Adds a geographic point to avoid \u2014 only for type <code>\"locations\"</code> <p>Note: <code>addValue()</code> should only be used when <code>type</code> is set to <code>\"locations\"</code>.</p>"},{"location":"api/avoid/#example","title":"Example","text":"<pre><code>import { Avoid } from \"@geoapify/route-planner-sdk\";\n\nconst avoid = new Avoid()\n  .setType(\"locations\")\n  .addValue(13.41, 52.52) // a blocked road\n  .addValue(13.37, 52.50); // restricted square\n</code></pre> <p>This rule tells the route planner to avoid specific geographic points. These are typically used when a driver should not pass through certain zones.</p>"},{"location":"api/avoid/#related","title":"Related","text":"<ul> <li><code>Coordinates</code> \u2013 utility for managing location points</li> <li><code>RoutePlanner</code> \u2013 where avoid rules can be passed as input</li> </ul>"},{"location":"api/break/","title":"<code>Break</code>","text":"<p>The <code>Break</code> class defines a time window where an agent should take a break during their working schedule. Breaks help enforce legal working conditions or schedule rest periods into the route plan.</p> <p>They are used as part of an agent's configuration and factored into the optimization just like jobs and shipments.</p>"},{"location":"api/break/#purpose","title":"Purpose","text":"<p>Use this class to specify:</p> <ul> <li>When an agent can take a break (via <code>time_windows</code>)</li> <li>How long the break should last (via <code>duration</code>)</li> </ul> <p>Breaks are optional but provide realistic and practical routing solutions \u2014 especially for long shifts or regulated delivery operations.</p>"},{"location":"api/break/#constructor","title":"Constructor","text":"<pre><code>new Break(raw?: BreakData)\n</code></pre> <p>Creates a new break configuration. If no data is passed, initializes with an empty time window list.</p>"},{"location":"api/break/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the underlying <code>BreakData</code> object <code>setRaw(data)</code> Replaces the break configuration entirely <code>setDuration(duration)</code> Sets the required break duration (in seconds) <code>addTimeWindow(start, end)</code> Adds a time window (in seconds) when the break may occur <p>Time windows are expressed as relative seconds from the start of the planning task.</p>"},{"location":"api/break/#example","title":"Example","text":"<pre><code>import { Break } from \"@geoapify/route-planner-sdk\";\n\nconst rest = new Break()\n  .setDuration(1800) // 30 minutes\n  .addTimeWindow(14400, 18000) // Between 4th and 5th hour\n  .addTimeWindow(28800, 32400); // Between 8th and 9th hour\n</code></pre> <p>In this example, the break can happen in either window, and the route planner will choose the best fit based on the route.</p>"},{"location":"api/break/#related","title":"Related","text":"<ul> <li><code>Agent</code> \u2013 breaks are added to agent schedules</li> <li><code>RoutePlanner</code> \u2013 uses agent definitions during planning</li> </ul>"},{"location":"api/coordinates/","title":"<code>Coordinates</code>","text":"<p>The <code>Coordinates</code> class is a simple utility used to represent a geographic point. It holds a latitude and longitude and is used throughout the SDK to define locations \u2014 for agents, jobs, shipments, or areas to avoid.</p>"},{"location":"api/coordinates/#purpose","title":"Purpose","text":"<p><code>Coordinates</code> is most often used to:</p> <ul> <li>Define points in <code>Avoid</code>, <code>Location</code>, or raw input structures</li> <li>Construct reusable location references</li> <li>Store <code>[latitude, longitude]</code> pairs in a typed, fluent format</li> </ul>"},{"location":"api/coordinates/#constructor","title":"Constructor","text":"<pre><code>new Coordinates(raw?: CoordinatesData)\n</code></pre> <p>Creates a new coordinate object. If no <code>raw</code> data is passed, initializes an empty object.</p>"},{"location":"api/coordinates/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the underlying <code>CoordinatesData</code> object <code>setRaw(data)</code> Replaces the entire coordinates structure <code>setLat(lat)</code> Sets the latitude value <code>setLon(lon)</code> Sets the longitude value <p>Note: Both latitude and longitude must be defined for a valid location.</p>"},{"location":"api/coordinates/#example","title":"Example","text":"<pre><code>import { Coordinates } from \"@geoapify/route-planner-sdk\";\n\nconst point = new Coordinates()\n  .setLat(52.52)\n  .setLon(13.38);\n\nconsole.log(point.getRaw());\n// { lat: 52.52, lon: 13.38 }\n</code></pre>"},{"location":"api/coordinates/#related","title":"Related","text":"<ul> <li><code>Avoid</code> \u2013 uses <code>Coordinates</code> to define exclusion zones</li> <li><code>Location</code> \u2013 a reusable location in planning input</li> <li><code>Agent</code> \u2013 may define start/end locations using coordinates</li> </ul> <p>```</p>"},{"location":"api/job-solution/","title":"<code>JobSolution</code>","text":"<p>The <code>JobSolution</code> class represents the result of how a specific job was handled in the final optimized route plan. It links the job to its assigned agent and shows the actions required to complete it.</p> <p>This class is useful for querying job-level execution details after optimization \u2014 such as which agent performed the job, when, and through which actions.</p>"},{"location":"api/job-solution/#purpose","title":"Purpose","text":"<p>Use <code>JobSolution</code> to:</p> <ul> <li>Inspect how and when a job was executed</li> <li>Determine which agent handled the job</li> <li>Access detailed route actions and assignment results</li> <li>Analyze job assignment distribution in a multi-agent scenario</li> </ul>"},{"location":"api/job-solution/#constructor","title":"Constructor","text":"<pre><code>new JobSolution(raw: JobSolutionData)\n</code></pre> <p>Creates a new <code>JobSolution</code> instance from raw result data. Throws an error if no data is provided.</p>"},{"location":"api/job-solution/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>JobSolutionData</code> object <code>getAgentId()</code> Returns the <code>id</code> of the agent that handled the job <code>getAgent()</code> Returns the full <code>AgentSolution</code> instance for the assigned agent <code>getJob()</code> Returns the original <code>Job</code> definition that was assigned <code>getActions()</code> Returns an array of <code>RouteAction</code> objects showing what steps were taken to complete the job"},{"location":"api/job-solution/#example","title":"Example","text":"<pre><code>const jobPlan = new JobSolution(data);\n\nconsole.log(\"Handled by agent:\", jobPlan.getAgentId());\n\nconst job = jobPlan.getJob();\nconst actions = jobPlan.getActions();\n</code></pre> <p>You can use this to group or filter completed jobs by agent, analyze performance, or visualize job execution across a timeline.</p>"},{"location":"api/job-solution/#related","title":"Related","text":"<ul> <li><code>Job</code> \u2013 the original job that was assigned</li> <li><code>AgentSolution</code> \u2013 full plan for the agent who completed the job</li> <li><code>RouteAction</code> \u2013 each step taken to complete the job</li> <li><code>RoutePlannerResult</code> \u2013 high-level access to all results</li> </ul>"},{"location":"api/job/","title":"<code>Job</code>","text":"<p>The <code>Job</code> class defines a single task to be completed by an agent \u2014 such as a delivery, service visit, or on-site inspection. It includes location, duration, and scheduling details, along with optional constraints like required skills or priority.</p> <p>Jobs are the simplest form of work assignment in the route planner. Unlike shipments, jobs involve only one location.</p>"},{"location":"api/job/#purpose","title":"Purpose","text":"<p>Use the <code>Job</code> class to define a stop that needs to be visited by an agent. You can set:</p> <ul> <li>A location (or reference a location index)</li> <li>How long the job takes</li> <li>Required skills (via <code>requirements</code>)</li> <li>When it must be done (via <code>time_windows</code>)</li> <li>Importance (via <code>priority</code>)</li> </ul> <p>Jobs can be optional or mandatory depending on how they\u2019re configured.</p>"},{"location":"api/job/#constructor","title":"Constructor","text":"<pre><code>new Job(raw?: JobData)\n</code></pre> <p>Initializes a job. If no data is passed, it creates a job with empty <code>requirements</code> and <code>time_windows</code>.</p>"},{"location":"api/job/#methods","title":"Methods","text":""},{"location":"api/job/#identification","title":"Identification","text":"Method Description <code>setId(value)</code> Sets a unique job ID <code>setDescription(value)</code> Adds a human-readable description"},{"location":"api/job/#location","title":"Location","text":"Method Description <code>setLocation(lon, lat)</code> Sets the job location directly <code>setLocationIndex(index)</code> References a predefined location by index (from <code>locations[]</code>)"},{"location":"api/job/#scheduling","title":"Scheduling","text":"Method Description <code>addTimeWindow(start, end)</code> Adds a time window (in relative seconds) <code>setDuration(value)</code> Specifies how long the job takes (in seconds)"},{"location":"api/job/#constraints","title":"Constraints","text":"Method Description <code>setPriority(value)</code> Importance from <code>0</code> (lowest) to <code>100</code> (highest) <code>addRequirement(value)</code> Adds a skill or capability required to perform the job"},{"location":"api/job/#capacity-for-bulky-goods-use-cases","title":"Capacity (for bulky goods use cases)","text":"Method Description <code>setPickupAmount(value)</code> Number of units picked up at this location <code>setDeliveryAmount(value)</code> Number of units delivered at this location"},{"location":"api/job/#example","title":"Example","text":"<pre><code>import { Job } from \"@geoapify/route-planner-sdk\";\n\nconst job = new Job()\n  .setId(\"order-1\")\n  .setLocation(13.38, 52.52)\n  .setDuration(300) // 5 minutes\n  .addTimeWindow(0, 14400)\n  .addRequirement(\"fragile\")\n  .setPriority(80);\n</code></pre> <p>This example defines a 5-minute job that must be completed within the first 4 hours of the planning window and requires a vehicle/agent with \"fragile\" handling capability.</p>"},{"location":"api/job/#related","title":"Related","text":"<ul> <li><code>Agent</code> \u2013 performs the job</li> <li><code>Shipment</code> \u2013 for jobs that require both pickup and delivery</li> <li><code>Location</code> \u2013 for reusable location references</li> </ul>"},{"location":"api/location/","title":"<code>Location</code>","text":"<p>The <code>Location</code> class defines a reusable geographic location used in route planning. Instead of specifying coordinates directly in agents, jobs, or shipments, you can use <code>Location</code> objects to centralize and reference shared coordinates.</p> <p>This helps reduce duplication and makes the input cleaner and easier to maintain \u2014 especially for locations like warehouses, stores, or repeated delivery points.</p>"},{"location":"api/location/#purpose","title":"Purpose","text":"<p>Use <code>Location</code> when:</p> <ul> <li>You want to define a set of shared coordinates once and reuse them</li> <li>You need to assign start/end points or job locations by index (e.g., <code>start_location_index</code>)</li> <li>You want to manage a list of known locations with unique identifiers</li> </ul> <p>These locations are referenced via indexes in the <code>locations[]</code> array in your API request.</p>"},{"location":"api/location/#constructor","title":"Constructor","text":"<pre><code>new Location(raw?: LocationData)\n</code></pre> <p>Initializes a new location. If no raw data is passed, creates an empty structure.</p>"},{"location":"api/location/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>LocationData</code> object <code>setRaw(data)</code> Replaces the entire location definition <code>setId(id)</code> Assigns a unique identifier for the location (optional) <code>setLocation(lon, lat)</code> Sets the geographic coordinates"},{"location":"api/location/#example","title":"Example","text":"<pre><code>import { Location } from \"@geoapify/route-planner-sdk\";\n\nconst warehouse = new Location()\n  .setId(\"warehouse-1\")\n  .setLocation(13.38, 52.52);\n</code></pre> <p>You can then reference this location by its index in the <code>locations[]</code> array when configuring an agent or shipment.</p>"},{"location":"api/location/#related","title":"Related","text":"<ul> <li><code>Agent</code> \u2013 can use start or end location indexes</li> <li><code>Job</code> \u2013 can reference a location via index</li> <li><code>Shipment</code> \u2013 pickup and delivery can use indexed locations</li> </ul>"},{"location":"api/route-action-info/","title":"<code>RouteActionInfo</code>","text":"<p>The <code>RouteActionInfo</code> class is a container that links a set of <code>RouteAction</code>s with the agent who performs them. It provides a quick and consolidated view of what an agent is doing along the route, including both the agent identity and their full list of actions.</p> <p>This is useful when you need to analyze or display route activities grouped by agent.</p>"},{"location":"api/route-action-info/#purpose","title":"Purpose","text":"<p>Use <code>RouteActionInfo</code> to:</p> <ul> <li>Group route actions by agent</li> <li>Retrieve a full list of execution steps for a specific agent</li> <li>Access the associated <code>AgentSolution</code> context directly</li> <li>Build Gantt charts, timelines, or dashboards per agent</li> </ul>"},{"location":"api/route-action-info/#constructor","title":"Constructor","text":"<pre><code>new RouteActionInfo(raw: RouteActionInfoData)\n</code></pre> <p>Initializes a <code>RouteActionInfo</code> object. Throws an error if raw input is missing.</p>"},{"location":"api/route-action-info/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>RouteActionInfoData</code> object <code>getAgentId()</code> Returns the <code>id</code> of the agent <code>getActions()</code> Returns an array of <code>RouteAction</code> objects <code>getAgent()</code> Returns the corresponding <code>AgentSolution</code> object"},{"location":"api/route-action-info/#example","title":"Example","text":"<pre><code>const actionInfo = new RouteActionInfo(data);\n\nconsole.log(\"Agent:\", actionInfo.getAgentId());\nconst actions = actionInfo.getActions();\n\nactions.forEach((action) =&gt; {\n  console.log(action.getType(), action.getStartTime());\n});\n</code></pre> <p>This helps you visualize all route activities for an agent in sequence.</p>"},{"location":"api/route-action-info/#related","title":"Related","text":"<ul> <li><code>RouteAction</code> \u2013 individual route steps</li> <li><code>AgentSolution</code> \u2013 full route and timeline for the agent</li> <li><code>RoutePlannerResult</code> \u2013 top-level access to all solutions</li> </ul>"},{"location":"api/route-action/","title":"<code>RouteAction</code>","text":"<p>The <code>RouteAction</code> class represents a single step or task that an agent performs along their route. It encapsulates what happens, when it happens, and how it relates to jobs, shipments, and locations.</p> <p>Actions are the atomic units of execution in the result and can include types like <code>start</code>, <code>pickup</code>, <code>delivery</code>, and <code>end</code>.</p>"},{"location":"api/route-action/#purpose","title":"Purpose","text":"<p>Use <code>RouteAction</code> to:</p> <ul> <li>Understand what the agent does at each stop</li> <li>Determine the timing and duration of actions</li> <li>Trace actions back to jobs or shipments</li> <li>Build execution timelines or visual route logs</li> </ul> <p>Each action is tied to a specific waypoint and contributes to the route's structure and semantics.</p>"},{"location":"api/route-action/#constructor","title":"Constructor","text":"<pre><code>new RouteAction(raw: RouteActionData)\n</code></pre> <p>Creates a <code>RouteAction</code> from raw result data. Throws an error if no data is provided.</p>"},{"location":"api/route-action/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>RouteActionData</code> object <code>getType()</code> Returns the action type: <code>start</code>, <code>pickup</code>, <code>delivery</code>, <code>end</code>, etc. <code>getStartTime()</code> Time (in seconds) when the action begins <code>getDuration()</code> How long the action takes (in seconds)"},{"location":"api/route-action/#job-and-shipment-linking","title":"Job and Shipment Linking","text":"Method Description <code>getJobIndex()</code> Index of the job in the original <code>jobs[]</code> array <code>getJobId()</code> Custom ID of the job (if set) <code>getShipmentIndex()</code> Index of the shipment (if applicable) <code>getShipmentId()</code> Custom ID of the shipment (if set)"},{"location":"api/route-action/#location-metadata","title":"Location Metadata","text":"Method Description <code>getLocationIndex()</code> Index in the shared <code>locations[]</code> list <code>getLocationId()</code> Custom ID of the location (if provided) <code>getWaypointIndex()</code> Index of the corresponding waypoint in the route"},{"location":"api/route-action/#example","title":"Example","text":"<pre><code>const action = new RouteAction(data);\n\nconsole.log(action.getType()); // 'pickup'\nconsole.log(action.getStartTime()); // 3600 (1 hour into route)\n</code></pre> <p>You can use route actions to generate step-by-step timelines or visualize delivery workflows.</p>"},{"location":"api/route-action/#related","title":"Related","text":"<ul> <li><code>AgentSolution</code> \u2013 contains all actions for an agent</li> <li><code>JobSolution</code> \u2013 filters actions by job</li> <li><code>Waypoint</code> \u2013 location where actions take place</li> <li><code>RouteLeg</code> \u2013 the travel segment between actions</li> </ul>"},{"location":"api/route-leg-step/","title":"<code>RouteLegStep</code>","text":"<p>The <code>RouteLegStep</code> class provides a fine-grained breakdown of a travel leg between two waypoints. Each step represents a segment of the road network \u2014 such as a turn, road segment, or instruction \u2014 with its own time, distance, and coordinate reference.</p> <p>This class is especially useful for building animated route visualizations or generating navigation-style instructions.</p>"},{"location":"api/route-leg-step/#purpose","title":"Purpose","text":"<p>Use <code>RouteLegStep</code> to:</p> <ul> <li>Animate route drawing step-by-step</li> <li>Analyze the path taken between stops</li> <li>Estimate costs or timing for each road segment</li> <li>Link steps to specific coordinates in the route geometry</li> </ul>"},{"location":"api/route-leg-step/#constructor","title":"Constructor","text":"<pre><code>new RouteLegStep(raw: RouteLegStepData)\n</code></pre> <p>Initializes a <code>RouteLegStep</code> with timing and distance data. Throws an error if the raw input is missing.</p>"},{"location":"api/route-leg-step/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the raw <code>RouteLegStepData</code> object <code>getDistance()</code> Distance of this step in meters <code>getTime()</code> Travel time in seconds <code>getFromIndex()</code> Index of the start coordinate in the route geometry array <code>getToIndex()</code> Index of the end coordinate in the route geometry array"},{"location":"api/route-leg-step/#example","title":"Example","text":"<pre><code>const step = new RouteLegStep(data);\n\nconsole.log(\"Step duration:\", step.getTime());\nconsole.log(\"From coord index:\", step.getFromIndex());\n</code></pre> <p>Used in combination with the route\u2019s geometry array, this allows you to reconstruct the exact map path followed in each leg.</p>"},{"location":"api/route-leg-step/#related","title":"Related","text":"<ul> <li><code>RouteLeg</code> \u2013 parent object containing a list of steps</li> <li><code>AgentSolution</code> \u2013 contains all route legs and steps</li> <li><code>Waypoint</code> \u2013 points connected by legs and steps</li> </ul>"},{"location":"api/route-leg/","title":"<code>RouteLeg</code>","text":"<p>The <code>RouteLeg</code> class represents a travel segment between two waypoints in an agent's route. Each leg includes distance, time, and a breakdown of navigation steps that make up that leg.</p> <p>This class is essential for visualizing or analyzing the travel portion between stops \u2014 for example, drawing map paths or calculating costs per leg.</p>"},{"location":"api/route-leg/#purpose","title":"Purpose","text":"<p>Use <code>RouteLeg</code> to:</p> <ul> <li>Inspect the time and distance between two stops</li> <li>Visualize or simulate movement along the route</li> <li>Access fine-grained navigation data via steps</li> <li>Link travel segments to <code>Waypoint</code> indices</li> </ul>"},{"location":"api/route-leg/#constructor","title":"Constructor","text":"<pre><code>new RouteLeg(raw: RouteLegData)\n</code></pre> <p>Initializes a <code>RouteLeg</code> with full travel details. Throws an error if no data is passed.</p>"},{"location":"api/route-leg/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>RouteLegData</code> object <code>getTime()</code> Total travel time (in seconds) for the leg <code>getDistance()</code> Total distance (in meters) for the leg <code>getFromWaypointIndex()</code> Index of the start waypoint <code>getToWaypointIndex()</code> Index of the destination waypoint <code>getSteps()</code> Returns an array of <code>RouteLegStep</code> objects for turn-by-turn details"},{"location":"api/route-leg/#example","title":"Example","text":"<pre><code>const leg = new RouteLeg(data);\n\nconsole.log(\"Travel time:\", leg.getTime());\nconsole.log(\"Distance:\", leg.getDistance());\n\nconst steps = leg.getSteps();\nsteps.forEach((step) =&gt; console.log(step.getTime(), step.getDistance()));\n</code></pre> <p>This allows you to break down travel details between two route points, for cost estimation or animation.</p>"},{"location":"api/route-leg/#related","title":"Related","text":"<ul> <li><code>Waypoint</code> \u2013 source and target of each leg</li> <li><code>RouteLegStep</code> \u2013 detailed instructions or segments within the leg</li> <li><code>AgentSolution</code> \u2013 contains a list of all route legs</li> </ul>"},{"location":"api/route-planner-result-editor/","title":"<code>RoutePlannerResultEditor</code>","text":"<p>The <code>RoutePlannerResultEditor</code> class allows you to modify an existing route planning result \u2014 for example, by reassigning jobs or shipments, adding new ones, or removing tasks.</p> <p>This is especially useful for:</p> <ul> <li>Manual adjustments after optimization</li> <li>Post-processing logic (e.g., reprioritizing deliveries)</li> <li>Integrating user edits into optimized results</li> </ul>"},{"location":"api/route-planner-result-editor/#purpose","title":"Purpose","text":"<p>Use <code>RoutePlannerResultEditor</code> to:</p> <ul> <li>Reassign jobs or shipments between agents</li> <li>Add new jobs or shipments after optimization</li> <li>Remove jobs or shipments from the result</li> <li>Retrieve an updated result for visualization or re-submission</li> </ul>"},{"location":"api/route-planner-result-editor/#constructor","title":"Constructor","text":"<pre><code>new RoutePlannerResultEditor(result: RoutePlannerResult)\n</code></pre> <p>Creates an editor instance using a deep clone of the original <code>RoutePlannerResult</code>. Changes do not affect the original object.</p>"},{"location":"api/route-planner-result-editor/#modification-methods","title":"Modification Methods","text":"Method Description <code>assignJobs(agentIdOrIndex, jobIdsOrIndexes, priority?)</code> Reassigns existing jobs to the specified agent, optionally updating priority <code>assignShipments(agentIdOrIndex, shipmentIdsOrIndexes, priority?)</code> Reassigns existing shipments to the specified agent, optionally updating priority <code>removeJobs(jobIdsOrIndexes)</code> Completely removes the given jobs from the plan <code>removeShipments(shipmentIdsOrIndexes)</code> Completely removes the given shipments from the plan <code>addNewJobs(agentIdOrIndex, jobs)</code> Adds new jobs to an agent\u2019s plan <code>addNewShipments(agentIdOrIndex, shipments)</code> Adds new shipments to an agent\u2019s plan <p>All modification methods return a <code>Promise&lt;boolean&gt;</code> indicating whether the operation succeeded.</p> <p>Each method supports both IDs (<code>string[]</code>) and indexes (<code>number[]</code>) for referencing jobs, shipments, and agents.</p>"},{"location":"api/route-planner-result-editor/#output","title":"Output","text":"Method Description <code>getModifiedResult()</code> Returns the updated <code>RoutePlannerResult</code> after modifications"},{"location":"api/route-planner-result-editor/#example","title":"Example","text":"<pre><code>const editor = new RoutePlannerResultEditor(result);\n\n// Move job-1 to agent-2 and change priority\nawait editor.assignJobs(\"agent-2\", [\"job-1\"], 10);\n\n// Add a new shipment to agent-1\nawait editor.addNewShipments(\"agent-1\", [new Shipment().setId(\"new-shipment\")]);\n\nconst updatedResult = editor.getModifiedResult();\n</code></pre>"},{"location":"api/route-planner-result-editor/#error-handling","title":"Error Handling","text":"Method Description <code>assertArray(array, name)</code> Internal utility for validating that inputs are arrays <p>All methods throw if provided agent/job/shipment IDs are not found.</p>"},{"location":"api/route-planner-result-editor/#related","title":"Related","text":"<ul> <li><code>RoutePlannerResult</code> \u2013 the result object this editor modifies</li> <li><code>Job</code>, <code>Shipment</code> \u2013 entities used in <code>addNewJobs</code> and <code>addNewShipments</code></li> <li><code>Agent</code> \u2013 entity used for assignment</li> </ul>"},{"location":"api/route-planner-result/","title":"<code>RoutePlannerResult</code>","text":"<p>The <code>RoutePlannerResult</code> class is the main entry point for working with the output of the Geoapify Route Planner API. It allows you to access planned agent routes, job and shipment assignments, and unassigned tasks.</p> <p>You can also extract structured timelines, detailed routing actions, and generate enriched visualizations or dashboards using its convenience methods.</p>"},{"location":"api/route-planner-result/#purpose","title":"Purpose","text":"<p>Use <code>RoutePlannerResult</code> to:</p> <ul> <li>Parse the raw result from the Geoapify Route Planner API</li> <li>Access planned agent routes and actions</li> <li>Retrieve assignment info for jobs and shipments</li> <li>Handle unassigned tasks</li> <li>Fetch additional routing details for visualization</li> </ul>"},{"location":"api/route-planner-result/#constructor","title":"Constructor","text":"<pre><code>new RoutePlannerResult(options: RoutePlannerOptions, rawData: RoutePlannerResultResponseData)\n</code></pre> <p>Initializes the result handler with routing options and the raw API response.</p>"},{"location":"api/route-planner-result/#core-methods","title":"Core Methods","text":"Method Description <code>getData()</code> Returns structured planner result (processed via converter) <code>getRawData()</code> Returns the raw JSON from the API response <code>getOptions()</code> Returns the <code>RoutePlannerOptions</code> used to make the request"},{"location":"api/route-planner-result/#agent-routes","title":"Agent Routes","text":"Method Description <code>getAgentSolutions()</code> Returns a list of <code>AgentSolution</code> for all assigned agents <code>getAgentSolutionsByIndex()</code> Returns agent solutions in array indexed by input agent list <code>getAgentSolution(agentIdOrIndex)</code> Retrieves a specific agent's solution <code>getAgentWaypoints(agentIdOrIndex)</code> Returns that agent's <code>Waypoint</code>s <code>getAgentRouteActions(agentIdOrIndex)</code> Returns that agent's <code>RouteAction</code>s <code>getAgentRouteLegs(agentIdOrIndex)</code> Returns that agent's <code>RouteLeg</code>s"},{"location":"api/route-planner-result/#assignments","title":"Assignments","text":"Method Description <code>getJobSolutions()</code> Returns a list of <code>JobSolution</code>s for all assigned jobs <code>getJobSolution(jobIdOrIndex)</code> Finds a job solution by its ID or index <code>getAgentJobs(agentIdOrIndex)</code> Returns indexes of jobs assigned to an agent <code>getShipmentSolutions()</code> Returns a list of <code>ShipmentSolution</code>s <code>getShipmentSolution(shipmentIdOrIndex)</code> Finds a shipment solution by ID or index <code>getAgentShipments(agentIdOrIndex)</code> Returns shipment indexes assigned to the agent"},{"location":"api/route-planner-result/#unassigned-tasks","title":"Unassigned Tasks","text":"Method Description <code>getUnassignedAgents()</code> Returns a list of unassigned <code>AgentData</code> entries <code>getUnassignedJobs()</code> Returns a list of unassigned <code>JobData</code> entries <code>getUnassignedShipments()</code> Returns a list of unassigned <code>ShipmentData</code> entries"},{"location":"api/route-planner-result/#job-shipment-info","title":"Job &amp; Shipment Info","text":"Method Description <code>getJobInfo(jobIdOrIndex)</code> Returns <code>RouteActionInfo</code> for a job (agent, actions, timeline) <code>getShipmentInfo(shipmentIdOrIndex)</code> Returns <code>RouteActionInfo</code> for a shipment"},{"location":"api/route-planner-result/#external-routing-fetch","title":"External Routing Fetch","text":"Method Description <code>getAgentRoute(agentIdOrIndex, options)</code> Fetches enriched routing details using agent waypoints and <code>RoutingOptions</code> <p>This triggers an HTTP request and returns additional polyline/route info from Geoapify Routing API.</p>"},{"location":"api/route-planner-result/#example","title":"Example","text":"<pre><code>const result = new RoutePlannerResult(options, rawResponse);\n\n// Use ID\nconst agent = result.getAgentSolution(\"agent-1\");\nconst waypoints = result.getAgentWaypoints(\"agent-1\");\n\n// Or use index\nconst agentByIndex = result.getAgentSolution(0);\nconst waypointsByIndex = result.getAgentWaypoints(0);\n\nconst unassignedJobs = result.getUnassignedJobs();\n</code></pre>"},{"location":"api/route-planner-result/#related","title":"Related","text":"<ul> <li><code>AgentSolution</code></li> <li><code>JobSolution</code></li> <li><code>ShipmentSolution</code></li> <li><code>RouteAction</code></li> <li><code>Waypoint</code></li> <li><code>RoutingOptions</code></li> </ul>"},{"location":"api/route-planner-timeline/","title":"<code>RoutePlannerTimeline</code>","text":"<p>The <code>RoutePlannerTimeline</code> class provides a ready-to-use UI component to visualize agent schedules and routes as horizontal timelines \u2014 either by time or by distance.</p> <p></p> <p>This component helps planners and dispatchers understand how jobs and shipments are distributed across agents and when they are executed.</p>"},{"location":"api/route-planner-timeline/#purpose","title":"Purpose","text":"<p>Use <code>RoutePlannerTimeline</code> to:</p> <ul> <li>Display each agent's route visually as a horizontal bar</li> <li>Show time-based or distance-based activity</li> <li>Present tooltips and popups with task details</li> <li>Add interactive agent menu controls</li> <li>Integrate route insights into dashboards or planning tools</li> </ul>"},{"location":"api/route-planner-timeline/#constructor","title":"Constructor","text":"<pre><code>new RoutePlannerTimeline(container: HTMLElement, inputData?: RoutePlannerInputData, result?: RoutePlannerResult, options?: RoutePlannerTimelineOptions)\n</code></pre> <ul> <li><code>container</code> \u2013 a DOM element that receives the generated timeline HTML</li> <li><code>inputData</code> \u2013 optional route planner input (for preview mode)</li> <li><code>result</code> \u2013 optional result of the planned routes</li> <li><code>options</code> \u2013 visualization options like colors, labels, layout type</li> </ul>"},{"location":"api/route-planner-timeline/#visualization-modes","title":"Visualization Modes","text":"Option Description <code>timelineType</code> <code>'time'</code> (default) or <code>'distance'</code> <code>agentColors</code> Color palette for agents <code>capacityUnit</code> Text label for shipment units <code>agentMenuItems</code> Agent-level 3-dot dropdown actions (e.g., Edit, Remove) <code>timeLabels</code>, <code>distanceLabels</code> Optional vertical markers <code>waypointPopupGenerator</code> Optional function to customize popups on hover"},{"location":"api/route-planner-timeline/#timeline-behavior","title":"Timeline Behavior","text":"Method Description <code>setTimelineType(type)</code> Switch between <code>'time'</code> and <code>'distance'</code> views <code>setResult(result)</code> Re-render timeline using new result <code>setAgentMenuItems(items)</code> Update agent-specific menu dropdowns <code>on(event, handler)</code> Listen to events like <code>onWaypointHover</code> <code>off(event, handler)</code> Unbind timeline events"},{"location":"api/route-planner-timeline/#getter-and-setter-methods","title":"Getter and Setter methods","text":"Method Description <code>getHasLargeDescription()</code> Checks whether agent info is displayed wide <code>setHasLargeDescription(value)</code> Toggles wide agent info display <code>getAgentColors()</code> Returns the current color palette <code>setAgentColors(value)</code> Sets the color palette for agents <code>getCapacityUnit()</code> Returns the shipment capacity unit <code>setCapacityUnit(value)</code> Sets the shipment capacity unit (e.g., \"items\") <code>getTimeLabels()</code> / <code>setTimeLabels()</code> Manage vertical timeline markers for time <code>getDistanceLabels()</code> / <code>setDistanceLabels()</code> Manage vertical markers for distance <code>getAgentLabel()</code> / <code>setAgentLabel()</code> Set or get the text label for agents"},{"location":"api/route-planner-timeline/#events","title":"Events","text":"Event Trigger <code>onWaypointHover</code> Mouse hovers over a job/waypoint item <code>beforeAgentMenuShow</code> Before displaying the agent's context menu (modify items when needed)"},{"location":"api/route-planner-timeline/#example","title":"Example","text":"<pre><code>const container = document.getElementById(\"timeline\");\nconst timeline = new RoutePlannerTimeline(container, inputData, result, {\n  timelineType: \"time\",\n  agentLabel: \"Driver\",\n  agentMenuItems: [\n    { key: \"edit\", label: \"Edit\", callback: (agentIndex) =&gt; console.log(\"Edit\", agentIndex) }\n  ]\n});\n\ntimeline.on(\"onWaypointHover\", (waypoint) =&gt; {\n  console.log(\"Hovered over:\", waypoint.getLocation());\n});\n\n// Optional: Modify menu items dynamically before they are shown\ntimeline.on('beforeAgentMenuShow', (agentIndex: number, actions: TimelineMenuItem[]) =&gt; {\n  return actions.map(action =&gt; {\n    if (action.key === 'show-hide-agent') {\n      return {\n        ...action,\n        label: this.agentVisibilityState[agentIndex] ? 'Show Route' : 'Hide Route'\n      };\n    }\n    return action;\n  });\n});\n</code></pre>"},{"location":"api/route-planner-timeline/#advanced-features","title":"Advanced Features","text":""},{"location":"api/route-planner-timeline/#waypoint-popups","title":"Waypoint Popups","text":"<ul> <li>Use <code>waypointPopupGenerator</code> to provide custom HTML tooltips</li> <li>Supports global hover tooltips or popup components</li> </ul>"},{"location":"api/route-planner-timeline/#styling","title":"Styling","text":"<p>The timeline component generates a number of CSS classes that can be customized to match your own design system:</p> <ul> <li><code>.geoapify-rp-sdk-timeline-item</code> \u2013 main container for each agent\u2019s timeline row  </li> <li>Each item also receives an additional class of the form <code>agent-{index}</code> (e.g., <code>agent-0</code>, <code>agent-1</code>), allowing per-agent styling. For example, you can visually indicate agents hidden on the map by applying a CSS rule that greys out their timeline row.</li> <li><code>.geoapify-rp-sdk-agent-info</code> \u2013 container for agent label and description  </li> <li><code>.geoapify-rp-sdk-solution-item</code> \u2013 represents individual jobs, shipments, or waypoints on the timeline  </li> <li><code>.geoapify-rp-sdk-three-dot-menu</code>, <code>.geoapify-rp-sdk-menu-list</code>, <code>.geoapify-rp-sdk-menu-item</code> \u2013 used for agent context menu controls  </li> <li><code>.geoapify-rp-sdk-custom-tooltip</code> \u2013 tooltip container for waypoint hover popups  </li> </ul> <p>All these classes can be fully customized or overridden with your own stylesheet to match branding or UX requirements.</p>"},{"location":"api/route-planner-timeline/#related","title":"Related","text":"<ul> <li><code>RoutePlannerResult</code></li> <li><code>AgentSolution</code></li> <li><code>Waypoint</code></li> <li><code>TimelineMenuItem</code></li> <li><code>RoutePlannerTimelineOptions</code></li> </ul>"},{"location":"api/route-planner/","title":"<code>RoutePlanner</code>","text":"<p>The <code>RoutePlanner</code> class is the main interface for sending a route optimization request to the Geoapify Route Planner API. It allows you to build your input incrementally, configure planning options, and submit the request.</p> <p>Once executed, it returns a structured <code>RoutePlannerResult</code> object containing all agent assignments, timelines, and route breakdowns.</p>"},{"location":"api/route-planner/#purpose","title":"Purpose","text":"<p>Use <code>RoutePlanner</code> to:</p> <ul> <li>Build and validate a route planning request</li> <li>Add agents, jobs, shipments, and constraints</li> <li>Specify travel mode and route options</li> <li>Submit the request and receive results in a structured format</li> </ul>"},{"location":"api/route-planner/#constructor","title":"Constructor","text":"<pre><code>new RoutePlanner(options: RoutePlannerOptions, raw?: RoutePlannerInputData)\n</code></pre> <p>Initializes the planner with configuration and optional raw input. If no base URL is provided, defaults to Geoapify's public API (<code>https://api.geoapify.com</code>).</p>"},{"location":"api/route-planner/#configuration-methods","title":"Configuration Methods","text":"Method Description <code>setMode(mode)</code> Sets travel mode (e.g., <code>drive</code>, <code>truck</code>, etc.) <code>setTraffic(traffic)</code> Sets traffic model (<code>free_flow</code>, <code>approximated</code>) <code>setType(type)</code> Sets route type (<code>balanced</code>, <code>short</code>, <code>less_maneuvers</code>) <code>setMaxSpeed(speed)</code> Limits max vehicle speed (in km/h) <code>setUnits(units)</code> Sets unit system (<code>metric</code> or <code>imperial</code>)"},{"location":"api/route-planner/#input-data-methods","title":"Input Data Methods","text":"Method Description <code>addAgent(agent)</code> Adds an <code>Agent</code> <code>addJob(job)</code> Adds a <code>Job</code> <code>addShipment(shipment)</code> Adds a <code>Shipment</code> <code>addLocation(location)</code> Adds a <code>Location</code> for reference <code>addAvoid(avoid)</code> Adds an <code>Avoid</code> rule <p>These methods allow incremental, chainable setup of the route request.</p>"},{"location":"api/route-planner/#request-execution","title":"Request Execution","text":"Method Description <code>plan()</code> Submits the request to the Route Planner API and returns a <code>RoutePlannerResult</code> <p>The <code>plan()</code> method automatically serializes the current input, sends a POST request, and returns a structured result object.</p>"},{"location":"api/route-planner/#example","title":"Example","text":"<pre><code>const planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" });\n\nconst result = await planner\n  .setMode(\"drive\")\n  .addAgent(new Agent().setId(\"agent-1\").setStartLocation(13.38, 52.52))\n  .addJob(new Job().setId(\"job-1\").setLocation(13.39, 52.51))\n  .plan();\n</code></pre>"},{"location":"api/route-planner/#error-handling","title":"Error Handling","text":"<p>If the API returns an error, the <code>plan()</code> method throws a <code>RoutePlannerError</code> with detailed information.</p>"},{"location":"api/route-planner/#related","title":"Related","text":"<ul> <li><code>RoutePlannerOptions</code></li> <li><code>RoutePlannerResult</code></li> <li><code>Agent</code>, <code>Job</code>, <code>Shipment</code></li> <li><code>Location</code>, <code>Avoid</code></li> </ul>"},{"location":"api/shipment-solution/","title":"<code>ShipmentSolution</code>","text":"<p>The <code>ShipmentSolution</code> class provides the result of how a specific shipment (with pickup and delivery) was executed in the final route plan. It ties the shipment to the agent who completed it and includes the related execution actions.</p> <p>This class is useful for post-optimization analysis, visual tracking, auditing, and logistics reporting.</p>"},{"location":"api/shipment-solution/#purpose","title":"Purpose","text":"<p>Use <code>ShipmentSolution</code> to:</p> <ul> <li>Inspect which agent handled a given shipment</li> <li>Analyze the pickup and delivery actions taken</li> <li>Review timing, locations, and fulfillment results</li> <li>Generate shipment-level execution logs or reports</li> </ul>"},{"location":"api/shipment-solution/#constructor","title":"Constructor","text":"<pre><code>new ShipmentSolution(raw: ShipmentSolutionData)\n</code></pre> <p>Creates a new instance of <code>ShipmentSolution</code>. Throws an error if no input is provided.</p>"},{"location":"api/shipment-solution/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the raw <code>ShipmentSolutionData</code> object <code>getAgentId()</code> Returns the <code>id</code> of the agent assigned to this shipment <code>getAgent()</code> Returns the full <code>AgentSolution</code> for the executing agent <code>getShipment()</code> Returns the original <code>Shipment</code> object that was planned <code>getActions()</code> Returns an array of <code>RouteAction</code> objects showing pickup and delivery execution steps"},{"location":"api/shipment-solution/#example","title":"Example","text":"<pre><code>const shipmentPlan = new ShipmentSolution(data);\n\nconsole.log(\"Handled by agent:\", shipmentPlan.getAgentId());\n\nconst shipment = shipmentPlan.getShipment();\nconst actions = shipmentPlan.getActions();\n</code></pre> <p>This helps you track the full delivery chain for any shipment \u2014 who picked it up, when it was delivered, and which route segments were involved.</p>"},{"location":"api/shipment-solution/#related","title":"Related","text":"<ul> <li><code>Shipment</code> \u2013 original task containing pickup and delivery steps</li> <li><code>AgentSolution</code> \u2013 full route and timeline of the assigned agent</li> <li><code>RouteAction</code> \u2013 execution steps like pickup or delivery</li> <li><code>RoutePlannerResult</code> \u2013 main object used to extract all shipment results</li> </ul>"},{"location":"api/shipment-step/","title":"<code>ShipmentStep</code>","text":"<p>The <code>ShipmentStep</code> class defines a single leg of a shipment \u2014 either the pickup or delivery step. It's used within the <code>Shipment</code> class to configure each location and its constraints independently.</p> <p>Each step includes its own location, time windows, and duration, allowing for detailed control over when and how goods are picked up or delivered.</p>"},{"location":"api/shipment-step/#purpose","title":"Purpose","text":"<p>Use <code>ShipmentStep</code> to:</p> <ul> <li>Define the pickup or delivery part of a shipment</li> <li>Control time constraints per step (e.g., pickup must happen before noon)</li> <li>Set how long the step will take</li> <li>Reference a reusable location or provide exact coordinates</li> </ul>"},{"location":"api/shipment-step/#constructor","title":"Constructor","text":"<pre><code>new ShipmentStep(raw?: ShipmentStepData)\n</code></pre> <p>Initializes a new shipment step. If no raw data is provided, creates a step with an empty list of time windows.</p>"},{"location":"api/shipment-step/#methods","title":"Methods","text":"Method Description <code>getRaw()</code> Returns the internal <code>ShipmentStepData</code> object <code>setRaw(data)</code> Replaces the entire shipment step configuration <code>setLocation(lon, lat)</code> Sets the step's exact coordinates <code>setLocationIndex(index)</code> References a predefined location by index <code>setDuration(seconds)</code> Sets how long the step takes (e.g., loading/unloading time) <code>addTimeWindow(start, end)</code> Adds a time window when this step can be executed (in seconds)"},{"location":"api/shipment-step/#example","title":"Example","text":"<pre><code>import { ShipmentStep } from \"@geoapify/route-planner-sdk\";\n\nconst pickup = new ShipmentStep()\n  .setLocation(13.38, 52.52)\n  .setDuration(180) // 3 minutes\n  .addTimeWindow(0, 14400); // must happen in the first 4 hours\n</code></pre> <p>This creates a shipment pickup that takes 3 minutes and must be completed within a specified window.</p>"},{"location":"api/shipment-step/#related","title":"Related","text":"<ul> <li><code>Shipment</code> \u2013 combines a pickup and delivery step into one logical task</li> <li><code>Location</code> \u2013 step locations can be reused via index</li> <li><code>Agent</code> \u2013 agents execute these steps as part of their planned route</li> </ul>"},{"location":"api/shipment/","title":"<code>Shipment</code>","text":"<p>The <code>Shipment</code> class defines a delivery that includes both a pickup and a delivery step. Both steps must be completed by the same agent, and each can have its own location, duration, and time constraints.</p> <p>Shipments are used when goods must be transported between two points, often with size, skill, or scheduling requirements.</p>"},{"location":"api/shipment/#purpose","title":"Purpose","text":"<p>Use the <code>Shipment</code> class to:</p> <ul> <li>Define pickup and delivery tasks as one logical unit</li> <li>Ensure both steps are assigned to the same agent</li> <li>Specify handling or equipment requirements</li> <li>Control when each step should happen</li> <li>Track priority or quantity for delivery planning</li> </ul>"},{"location":"api/shipment/#constructor","title":"Constructor","text":"<pre><code>new Shipment(raw?: ShipmentData)\n</code></pre> <p>Initializes a shipment with an empty <code>requirements</code> array if no data is passed.</p>"},{"location":"api/shipment/#methods","title":"Methods","text":""},{"location":"api/shipment/#identification-description","title":"Identification &amp; Description","text":"Method Description <code>setId(id)</code> Assigns a unique identifier to the shipment <code>setDescription(text)</code> Adds an optional human-readable description"},{"location":"api/shipment/#steps","title":"Steps","text":"Method Description <code>setPickup(step: ShipmentStep)</code> Defines the pickup location, timing, and duration <code>setDelivery(step: ShipmentStep)</code> Defines the delivery location, timing, and duration <p>Each step must be an instance of <code>ShipmentStep</code>.</p>"},{"location":"api/shipment/#constraints","title":"Constraints","text":"Method Description <code>addRequirement(value)</code> Adds a required agent capability (e.g., <code>\"fragile\"</code>, <code>\"hazmat\"</code>) <code>setPriority(value)</code> Sets a priority from 0\u2013100; low-priority shipments may be skipped <code>setAmount(value)</code> Specifies how much is being shipped (for capacity management)"},{"location":"api/shipment/#example","title":"Example","text":"<pre><code>import { Shipment, ShipmentStep } from \"@geoapify/route-planner-sdk\";\n\nconst pickup = new ShipmentStep()\n  .setLocation(13.38, 52.52)\n  .setDuration(300)\n  .addTimeWindow(0, 14400);\n\nconst delivery = new ShipmentStep()\n  .setLocation(13.41, 52.50)\n  .setDuration(300)\n  .addTimeWindow(18000, 32400);\n\nconst shipment = new Shipment()\n  .setId(\"delivery-1\")\n  .setPickup(pickup)\n  .setDelivery(delivery)\n  .addRequirement(\"cooled\")\n  .setAmount(20)\n  .setPriority(80);\n</code></pre> <p>This defines a shipment that must be picked up and delivered within specific time windows, and requires a vehicle capable of handling cooled goods.</p>"},{"location":"api/shipment/#related","title":"Related","text":"<ul> <li><code>ShipmentStep</code> \u2013 used to define pickup and delivery points</li> <li><code>Agent</code> \u2013 must satisfy all requirements and constraints</li> <li><code>Job</code> \u2013 for simpler single-location tasks</li> <li><code>Location</code> \u2013 for shared coordinates</li> </ul>"},{"location":"api/types/","title":"Interfaces","text":""},{"location":"api/types/#timelinemenuitem","title":"TimelineMenuItem","text":"<pre><code>export interface TimelineMenuItem {\n  key: string;\n  label?: string;\n  disabled?: boolean;\n  hidden?: boolean;\n  callback: (agentIndex: number) =&gt; void;\n}\n</code></pre>"},{"location":"api/types/#routeplannertimelineoptions","title":"RoutePlannerTimelineOptions","text":"<pre><code>export interface RoutePlannerTimelineOptions {\n    timelineType?: 'time' | 'distance';\n    hasLargeDescription?: boolean;\n    capacityUnit?: string;\n    agentLabel?: string;\n    label?: string;\n    description?: string;\n    timeLabels?: RoutePlannerTimelineLabel[];\n    distanceLabels?: RoutePlannerTimelineLabel[];\n    agentColors?: string[];\n    showWaypointPopup?: boolean;\n    waypointPopupGenerator?: (waypoint: Waypoint) =&gt; HTMLElement;\n    agentMenuItems?: TimelineMenuItem[];\n}\n</code></pre>"},{"location":"api/types/#routingoptions","title":"RoutingOptions","text":"<pre><code>export interface RoutingOptions {\n    mode: TravelMode;\n    type?: RouteType;\n    units?: DistanceUnitType;\n    lang?: string;\n    avoid?: AvoidType[];\n    details?: RouteDetailsType[];\n    traffic?: TrafficType;\n    max_speed?: number;\n}\n</code></pre>"},{"location":"api/waypoint/","title":"<code>Waypoint</code>","text":"<p>A <code>Waypoint</code> represents a physical location in an agent\u2019s route where one or more actions (e.g., pickup, delivery, start, end) occur. It includes information about its coordinates, when the agent will arrive, how long they will stay, and the actions performed.</p> <p>Waypoints are central to building timelines, visual routes, and event logs for each agent.</p>"},{"location":"api/waypoint/#purpose","title":"Purpose","text":"<p>Use <code>Waypoint</code> to:</p> <ul> <li>Determine when and where an agent stops</li> <li>See which jobs or shipments are performed at each stop</li> <li>Build route visualization or Gantt timelines</li> <li>Link travel segments before/after the stop</li> </ul>"},{"location":"api/waypoint/#constructor","title":"Constructor","text":"<pre><code>new Waypoint(raw: WaypointData)\n</code></pre> <p>Creates a <code>Waypoint</code> from raw result data. Throws an error if data is missing.</p>"},{"location":"api/waypoint/#methods","title":"Methods","text":""},{"location":"api/waypoint/#location-identification","title":"Location &amp; Identification","text":"Method Description <code>getOriginalLocation()</code> Coordinates of the declared location (input) <code>getOriginalLocationIndex()</code> Index in the <code>locations[]</code> array (if used) <code>getOriginalLocationId()</code> ID of the input location (if set) <code>getLocation()</code> Final matched location after route optimization"},{"location":"api/waypoint/#timing","title":"Timing","text":"Method Description <code>getStartTime()</code> Time when the agent arrives at the waypoint <code>getDuration()</code> Total duration spent at the stop (in seconds)"},{"location":"api/waypoint/#actions","title":"Actions","text":"Method Description <code>getActions()</code> Returns a list of <code>RouteAction</code> objects performed at this location"},{"location":"api/waypoint/#route-position","title":"Route Position","text":"Method Description <code>getPrevLegIndex()</code> Index of the route leg leading into this waypoint <code>getNextLegIndex()</code> Index of the route leg going out from this waypoint"},{"location":"api/waypoint/#example","title":"Example","text":"<pre><code>const waypoint = new Waypoint(data);\n\nconsole.log(\"Arrives at:\", waypoint.getStartTime());\nconsole.log(\"Does:\", waypoint.getActions().map(a =&gt; a.getType()).join(\", \"));\n</code></pre>"},{"location":"api/waypoint/#use-cases","title":"Use Cases","text":"<ul> <li>Timeline visualizations for dispatchers</li> <li>Gantt-style charts for mobile agents</li> <li>Stop-by-stop maps and reports</li> <li>Popup details in interactive maps</li> </ul>"},{"location":"api/waypoint/#related","title":"Related","text":"<ul> <li><code>RouteAction</code> \u2013 actions executed at this location</li> <li><code>AgentSolution</code> \u2013 contains a list of waypoints</li> <li><code>RouteLeg</code> \u2013 links between waypoints</li> </ul>"},{"location":"examples/editing-planned-result/","title":"Example: Editing Planned Result After Optimization","text":"<p>In this example, we'll:</p> <ul> <li>Execute a route optimization</li> <li>Inspect the result</li> <li>Reassign a job from one agent to another using the <code>RoutePlannerResultEditor</code></li> </ul> <p>This is useful when you want to manually adjust plans based on real-world constraints (like agent availability or new priorities).</p>"},{"location":"examples/editing-planned-result/#1-import-the-sdk","title":"1. Import the SDK","text":"<pre><code>import RoutePlanner, { Agent, Job, RoutePlannerResultEditor } from \"@geoapify/route-planner-sdk\";\n</code></pre>"},{"location":"examples/editing-planned-result/#2-initialize-planner-and-add-input","title":"2. Initialize Planner and Add Input","text":"<pre><code>const planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" });\n\nplanner\n  .setMode(\"drive\")\n  .addAgent(new Agent().setId(\"agent-1\").setStartLocation(13.40, 52.52))\n  .addAgent(new Agent().setId(\"agent-2\").setStartLocation(13.42, 52.50))\n  .addJob(new Job().setId(\"job-1\").setLocation(13.41, 52.51))\n  .addJob(new Job().setId(\"job-2\").setLocation(13.39, 52.53));\n</code></pre>"},{"location":"examples/editing-planned-result/#3-plan-the-route","title":"3. Plan the Route","text":"<pre><code>const result = await planner.plan();\n</code></pre>"},{"location":"examples/editing-planned-result/#4-view-initial-assignments","title":"4. View Initial Assignments","text":"<pre><code>result.getAgentSolutions().forEach(agent =&gt; {\n  console.log(`Agent: ${agent.getAgentId()}`);\n  agent.getActions().forEach(action =&gt; {\n    console.log(` - ${action.getType()} ${action.getJobId()}`);\n  });\n});\n</code></pre>"},{"location":"examples/editing-planned-result/#5-reassign-a-job-to-another-agent","title":"5. Reassign a Job to Another Agent","text":"<p>Let's say we want to reassign <code>job-1</code> from <code>agent-1</code> to <code>agent-2</code>:</p> <pre><code>const editor = new RoutePlannerResultEditor(result);\nawait editor.assignJobs(\"agent-1\", [\"job-1\"]);\nconst updatedResult = editor.getModifiedResult();\n</code></pre>"},{"location":"examples/editing-planned-result/#6-view-modified-assignments","title":"6. View Modified Assignments","text":"<pre><code>console.log(\"Modified solution:\");\n\nupdatedResult.getAgentSolutions().forEach(agent =&gt; {\n  console.log(`Agent: ${agent.getAgentId()}`);\n  agent.getActions().forEach(action =&gt; {\n    console.log(` - ${action.getType()} ${action.getJobId()}`);\n  });\n});\n</code></pre>"},{"location":"examples/editing-planned-result/#summary","title":"Summary","text":"<p>This example shows how you can:</p> <ul> <li>Automatically optimize a plan</li> <li>Manually override assignments using editor tools</li> </ul> <p>This gives you the flexibility to combine automated and human planning.</p> <p>For more editor capabilities, see <code>RoutePlannerResultEditor</code>.</p>"},{"location":"examples/optimizing-shipments-3-agents/","title":"Example: Planning 20 Shipments with 3 Agents","text":"<p>This example demonstrates how to use the Geoapify Route Optimization SDK to:</p> <ul> <li>Create multiple agents</li> <li>Define 20 shipments with predefined pickup and delivery points</li> <li>Optimize delivery plans for 3 agents</li> </ul>"},{"location":"examples/optimizing-shipments-3-agents/#1-import-the-sdk","title":"1. Import the SDK","text":"<pre><code>import RoutePlanner, { Agent, Shipment, ShipmentStep } from \"@geoapify/route-planner-sdk\";\n</code></pre>"},{"location":"examples/optimizing-shipments-3-agents/#2-create-the-planner","title":"2. Create the Planner","text":"<pre><code>const planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" });\n</code></pre>"},{"location":"examples/optimizing-shipments-3-agents/#3-add-agents","title":"3. Add Agents","text":"<p>Each agent has a different starting point:</p> <pre><code>planner\n  .addAgent(new Agent().setId(\"agent-1\").setStartLocation(13.40, 52.52))\n  .addAgent(new Agent().setId(\"agent-2\").setStartLocation(13.42, 52.50))\n  .addAgent(new Agent().setId(\"agent-3\").setStartLocation(13.39, 52.53));\n</code></pre>"},{"location":"examples/optimizing-shipments-3-agents/#4-add-20-shipments-with-predefined-coordinates","title":"4. Add 20 Shipments with Predefined Coordinates","text":"<p>Below are example coordinates for pickups and deliveries. You can replace them with real-world locations.</p> <pre><code>const shipmentCoords = [\n  { pickup: [13.35, 52.50], delivery: [13.45, 52.55] },\n  { pickup: [13.36, 52.51], delivery: [13.44, 52.54] },\n  { pickup: [13.37, 52.52], delivery: [13.43, 52.53] },\n  { pickup: [13.38, 52.53], delivery: [13.42, 52.52] },\n  { pickup: [13.39, 52.54], delivery: [13.41, 52.51] },\n  { pickup: [13.40, 52.55], delivery: [13.40, 52.50] },\n  { pickup: [13.41, 52.50], delivery: [13.39, 52.55] },\n  { pickup: [13.42, 52.51], delivery: [13.38, 52.54] },\n  { pickup: [13.43, 52.52], delivery: [13.37, 52.53] },\n  { pickup: [13.44, 52.53], delivery: [13.36, 52.52] },\n  { pickup: [13.45, 52.54], delivery: [13.35, 52.51] },\n  { pickup: [13.34, 52.55], delivery: [13.33, 52.50] },\n  { pickup: [13.32, 52.52], delivery: [13.31, 52.53] },\n  { pickup: [13.30, 52.51], delivery: [13.29, 52.54] },\n  { pickup: [13.28, 52.50], delivery: [13.27, 52.55] },\n  { pickup: [13.26, 52.53], delivery: [13.25, 52.52] },\n  { pickup: [13.24, 52.54], delivery: [13.23, 52.51] },\n  { pickup: [13.22, 52.55], delivery: [13.21, 52.50] },\n  { pickup: [13.20, 52.52], delivery: [13.19, 52.53] },\n  { pickup: [13.18, 52.51], delivery: [13.17, 52.54] },\n];\n\nshipmentCoords.forEach(({ pickup, delivery }, i) =&gt; {\n  const shipment = new Shipment()\n    .setId(`shipment-${i + 1}`)\n    .setPickup(new ShipmentStep().setLocation(pickup[0], pickup[1]).setDuration(60))\n    .setDelivery(new ShipmentStep().setLocation(delivery[0], delivery[1]).setDuration(60));\n\n  planner.addShipment(shipment);\n});\n</code></pre>"},{"location":"examples/optimizing-shipments-3-agents/#5-plan-and-analyze","title":"5. Plan and Analyze","text":"<pre><code>const result = await planner.setMode(\"drive\").plan();\n\nresult.getAgentSolutions().forEach((agent) =&gt; {\n  console.log(`Agent: ${agent.getAgentId()}`);\n  agent.getActions().forEach((action) =&gt; {\n    console.log(` - ${action.getType()} shipment ${action.getShipmentId()} at ${action.getStartTime()}s`);\n  });\n});\n</code></pre>"},{"location":"examples/optimizing-shipments-3-agents/#result","title":"Result","text":"<p>You now have an optimized plan that distributes 20 shipments across 3 agents, balancing their travel time and minimizing route overlap.</p> <p>To visualize the output, see <code>RoutePlannerTimeline</code>.</p> <p>For editing the result manually, use <code>RoutePlannerResultEditor</code>.</p>"},{"location":"examples/optimizing-shipments-3-agents/#see-also","title":"See Also","text":"<ul> <li>API Overview</li> <li>Optimizing with Jobs</li> <li>SDK Playground</li> </ul>"},{"location":"examples/optimizing-two-agents/","title":"Example: Optimizing Delivery Routes with Two Agents","text":"<p>This example demonstrates how to use the Geoapify Route Optimization SDK to: - Define multiple delivery jobs - Assign two delivery agents - Send a request to the Route Planner API - Print the optimized job sequence for each agent</p>"},{"location":"examples/optimizing-two-agents/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"examples/optimizing-two-agents/#1-import-the-sdk","title":"1. Import the SDK","text":"<p>Install the SDK via npm:</p> <pre><code>npm install @geoapify/route-planner-sdk\n</code></pre> <p>Then import it in your TypeScript project:</p> <pre><code>import RoutePlanner, { Agent, Job } from \"@geoapify/route-planner-sdk\";\n</code></pre>"},{"location":"examples/optimizing-two-agents/#2-create-your-planner-instance","title":"2. Create Your Planner Instance","text":"<p>You need to pass your API key:</p> <pre><code>const planner = new RoutePlanner({ apiKey: \"YOUR_API_KEY\" });\n</code></pre>"},{"location":"examples/optimizing-two-agents/#3-define-agents","title":"3. Define Agents","text":"<p>Each agent has a unique <code>id</code> and a starting location (longitude, latitude). You can also define working hours or vehicle capacity.</p> <pre><code>planner\n  .addAgent(new Agent()\n    .setId(\"agent-1\")\n    .setStartLocation(13.4050, 52.5200))  // Berlin\n  .addAgent(new Agent()\n    .setId(\"agent-2\")\n    .setStartLocation(13.3889, 52.5170)); // Berlin Mitte\n</code></pre>"},{"location":"examples/optimizing-two-agents/#4-add-jobs","title":"4. Add Jobs","text":"<p>Each job is a delivery task. Specify location and optional details like duration or priority.</p> <pre><code>planner\n  .addJob(new Job().setId(\"job-1\").setLocation(13.4105, 52.5190))\n  .addJob(new Job().setId(\"job-2\").setLocation(13.3969, 52.5145))\n  .addJob(new Job().setId(\"job-3\").setLocation(13.4285, 52.5232));\n</code></pre>"},{"location":"examples/optimizing-two-agents/#5-plan-the-route","title":"5. Plan the Route","text":"<p>Call <code>.plan()</code> to send the request and receive an optimized route plan.</p> <pre><code>const result = await planner.setMode(\"drive\").plan();\n</code></pre>"},{"location":"examples/optimizing-two-agents/#6-inspect-the-result","title":"6. Inspect the Result","text":"<p>Print a simplified summary of the plan:</p> <pre><code>for (const agent of result.getAgentSolutions()) {\n  console.log(`Agent: ${agent.getAgentId()}`);\n  for (const action of agent.getActions()) {\n    console.log(` - ${action.getType()} at time ${action.getStartTime()}`);\n  }\n}\n</code></pre> <p>This will show when each agent starts, what actions they perform, and in what order.</p>"},{"location":"examples/optimizing-two-agents/#whats-next","title":"What's Next?","text":"<p>You can also:</p> <ul> <li>Visualize results with <code>RoutePlannerTimeline</code></li> <li>Modify assignments using <code>RoutePlannerResultEditor</code></li> <li>Rebalance workload dynamically</li> </ul> <p>For more details, visit the API Overview.</p>"}]}